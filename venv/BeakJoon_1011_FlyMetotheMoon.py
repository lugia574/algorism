# k광년을 이동하였을 때는 k-1 , k 혹은 k+1 광년만을 다시 이동할 수 있다.
# 예를 들어, 이 장치를 처음 작동시킬 경우 -1 , 0 , 1 광년을 이론상 이동할 수 있으나
# 사실상 음수 혹은 0 거리만큼의 이동은 의미가 없으므로 1 광년을 이동할 수 있으며,
# 그 다음에는 0 , 1 , 2 광년을 이동할 수 있는 것이다. ( 여기서 다시 2광년을 이동한다면 다음 시기엔 1, 2, 3 광년을 이동할 수 있다. )

# 김우현은 공간이동 장치 작동시의 에너지 소모가 크다는 점을 잘 알고 있기 때문에 x지점에서 y지점을 향해 최소한의 작동 횟수로 이동하려 한다.
# 하지만 y지점에 도착해서도 공간 이동장치의 안전성을 위하여 y지점에 도착하기 바로 직전의 이동거리는 반드시 1광년으로 하려 한다.
#
# 김우현을 위해 x지점부터 정확히 y지점으로 이동하는데 필요한 공간 이동 장치 작동 횟수의 최솟값을 구하는 프로그램을 작성하라.
# 1 - 1
# 2 - 2
# 3 4 - 3
# 5 6 - 4
#
# 7 8 9 -5
# 10 11 12 -6
#
# 13 14 15 16 - 7
# 17 18 19 20 - 8
#
# 21 22 23 24 25 - 9
#
# 17
# 1 2 3 4 3 2 1 1
# 18
# 1 2 3 4 3 2 2 1
# 19
# 1 2 3 4 3 3 2 1
# 20
# 1 2 3 4 4 3 2 1
#
# 21
# 1 2 3 4 4 3 2 1 1
# 22
# 1 2 3 4 4 3 2 2 1
# 23
# 1 2 3 4 4 3 3 2 1
# 24
# 1 2 3 4 4 4 3 2 1
# 25
# 1 2 3 4 5 4 3 2 1

import math


def Fly(start, goal):
    cnt = 0
    sqrt = math.sqrt(goal - start)
    if goal - start == int(sqrt)**2:
          cnt = 2*int(sqrt)-1
    else:
        if goal - start == 1 or goal - start == 2 or goal - start == 3:
            cnt = goal - start

        elif round(sqrt) == int(sqrt)+1:
            cnt = 2*(int(sqrt)+1)-1

        else:
            cnt = 2*(int(sqrt)+1)-2

    return cnt

tr = int(input())
for _ in range(tr):
    start, goal = map(int,input().split())
    print(Fly(start,goal))